<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Funky Cloud Medina</title>
    <link>https://www.funkycloudmedina.com/tags/aws/</link>
    <description>Recent content in Aws on Funky Cloud Medina</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017. All rights reserved.</copyright>
    <lastBuildDate>Tue, 20 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.funkycloudmedina.com/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Auto deploy a Hugo website from GitHub to S3 - Part 2</title>
      <link>https://www.funkycloudmedina.com/2018/02/auto-deploy-a-hugo-website-from-github-to-s3---part-2/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.funkycloudmedina.com/2018/02/auto-deploy-a-hugo-website-from-github-to-s3---part-2/</guid>
      <description>This post is part of a series. You&amp;rsquo;re reading Part 2.
 Auto deploy a Hugo website from GitHub to S3 - Part 1  Preparing for the AWS Lambda function Now that GitHub notifies AWS of changes, we need to create the &amp;ldquo;doing&amp;rdquo; part of our project. We&amp;rsquo;re going to use AWS&amp;rsquo; Lambda service to perform the work. Lambda will execute the function everytime a notification is published to the SNS topic.</description>
    </item>
    
    <item>
      <title>Using Docker as an adhoc NodeJS package manager</title>
      <link>https://www.funkycloudmedina.com/2018/02/using-docker-as-an-adhoc-nodejs-package-manager/</link>
      <pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.funkycloudmedina.com/2018/02/using-docker-as-an-adhoc-nodejs-package-manager/</guid>
      <description>During my GitHub -&amp;gt; Lambda -&amp;gt; S3 series I needed to download and install NodeJS modules into my project&amp;rsquo;s working directory. I didn&amp;rsquo;t really want to install NodeJS and NPM on my Mac as my machine is a daily driver (SysAdmin/Ops) and not really a front or backend dev machine.
I could always use a virtual machine but that&amp;rsquo;s too resource intensive just to download some NPM modules. What&amp;rsquo;s smaller than a VM?</description>
    </item>
    
    <item>
      <title>Auto deploy a Hugo website from GitHub to S3 - Part 1</title>
      <link>https://www.funkycloudmedina.com/2018/02/auto-deploy-a-hugo-website-from-github-to-s3---part-1/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.funkycloudmedina.com/2018/02/auto-deploy-a-hugo-website-from-github-to-s3---part-1/</guid>
      <description>This post is part of a series. You&amp;rsquo;re reading Part 1.
 Auto deploy a Hugo website from GitHub to S3 - Part 2  Introduction For those who don&amp;rsquo;t know what Hugo is, it&amp;rsquo;s a static website generator. Its source material is a Hugo template with your content in Markdown. I&amp;rsquo;ve used it for a while, in fact this blog is generated using Hugo. Hugo can give you an entire site in HTML/CSS and any required Javascript that you can then place anywhere on the web.</description>
    </item>
    
    <item>
      <title>Updating a Route53 domain&#39;s Name Servers</title>
      <link>https://www.funkycloudmedina.com/2017/09/updating-a-route53-domains-name-servers/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.funkycloudmedina.com/2017/09/updating-a-route53-domains-name-servers/</guid>
      <description>I recently had the need to update an AWS Route53 domain NS configuration so that it could be protected by CloudFlare. This domain was purchased via Route53. I had updated the hosted zone NS records with the new Name Servers, but the domain continued to point to AWS and it drove me nuts. Turns out there is another section in Route53 where you updated the NS records for your Route53 managed domain.</description>
    </item>
    
  </channel>
</rss>